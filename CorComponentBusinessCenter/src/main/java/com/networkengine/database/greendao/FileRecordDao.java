package com.networkengine.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.networkengine.database.table.FileRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_file_record".
*/
public class FileRecordDao extends AbstractDao<FileRecord, Long> {

    public static final String TABLENAME = "table_file_record";

    /**
     * Properties of entity FileRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownOrUpload = new Property(1, int.class, "downOrUpload", false, "DOWN_OR_UPLOAD");
        public final static Property State = new Property(2, int.class, "state", false, "STATE");
        public final static Property Uid = new Property(3, String.class, "uid", false, "UID");
        public final static Property IsSuccess = new Property(4, boolean.class, "isSuccess", false, "IS_SUCCESS");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property LocalPath = new Property(6, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property NetPath = new Property(7, String.class, "netPath", false, "NET_PATH");
        public final static Property Sha = new Property(8, String.class, "sha", false, "SHA");
        public final static Property Parameter = new Property(9, String.class, "parameter", false, "PARAMETER");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Md5 = new Property(11, String.class, "md5", false, "MD5");
        public final static Property StartTime = new Property(12, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(13, Long.class, "endTime", false, "END_TIME");
        public final static Property TotalSize = new Property(14, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property PosSize = new Property(15, Long.class, "posSize", false, "POS_SIZE");
        public final static Property Function = new Property(16, int.class, "function", false, "FUNCTION");
        public final static Property Function_type = new Property(17, String.class, "function_type", false, "FUNCTION_TYPE");
    }


    public FileRecordDao(DaoConfig config) {
        super(config);
    }
    
    public FileRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_file_record\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWN_OR_UPLOAD\" INTEGER NOT NULL ," + // 1: downOrUpload
                "\"STATE\" INTEGER NOT NULL ," + // 2: state
                "\"UID\" TEXT," + // 3: uid
                "\"IS_SUCCESS\" INTEGER NOT NULL ," + // 4: isSuccess
                "\"NAME\" TEXT," + // 5: name
                "\"LOCAL_PATH\" TEXT," + // 6: localPath
                "\"NET_PATH\" TEXT," + // 7: netPath
                "\"SHA\" TEXT," + // 8: sha
                "\"PARAMETER\" TEXT," + // 9: parameter
                "\"TYPE\" TEXT," + // 10: type
                "\"MD5\" TEXT," + // 11: md5
                "\"START_TIME\" INTEGER," + // 12: startTime
                "\"END_TIME\" INTEGER," + // 13: endTime
                "\"TOTAL_SIZE\" INTEGER," + // 14: totalSize
                "\"POS_SIZE\" INTEGER," + // 15: posSize
                "\"FUNCTION\" INTEGER NOT NULL ," + // 16: function
                "\"FUNCTION_TYPE\" TEXT);"); // 17: function_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_file_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDownOrUpload());
        stmt.bindLong(3, entity.getState());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
        stmt.bindLong(5, entity.getIsSuccess() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(7, localPath);
        }
 
        String netPath = entity.getNetPath();
        if (netPath != null) {
            stmt.bindString(8, netPath);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(9, sha);
        }
 
        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(10, parameter);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(12, md5);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(13, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(14, endTime);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(15, totalSize);
        }
 
        Long posSize = entity.getPosSize();
        if (posSize != null) {
            stmt.bindLong(16, posSize);
        }
        stmt.bindLong(17, entity.getFunction());
 
        String function_type = entity.getFunction_type();
        if (function_type != null) {
            stmt.bindString(18, function_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDownOrUpload());
        stmt.bindLong(3, entity.getState());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
        stmt.bindLong(5, entity.getIsSuccess() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(7, localPath);
        }
 
        String netPath = entity.getNetPath();
        if (netPath != null) {
            stmt.bindString(8, netPath);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(9, sha);
        }
 
        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(10, parameter);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(12, md5);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(13, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(14, endTime);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(15, totalSize);
        }
 
        Long posSize = entity.getPosSize();
        if (posSize != null) {
            stmt.bindLong(16, posSize);
        }
        stmt.bindLong(17, entity.getFunction());
 
        String function_type = entity.getFunction_type();
        if (function_type != null) {
            stmt.bindString(18, function_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileRecord readEntity(Cursor cursor, int offset) {
        FileRecord entity = new FileRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // downOrUpload
            cursor.getInt(offset + 2), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uid
            cursor.getShort(offset + 4) != 0, // isSuccess
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // localPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // netPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sha
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // parameter
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // md5
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // startTime
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // endTime
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // totalSize
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // posSize
            cursor.getInt(offset + 16), // function
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // function_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownOrUpload(cursor.getInt(offset + 1));
        entity.setState(cursor.getInt(offset + 2));
        entity.setUid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSuccess(cursor.getShort(offset + 4) != 0);
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocalPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNetPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSha(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParameter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMd5(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStartTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setEndTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setTotalSize(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setPosSize(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setFunction(cursor.getInt(offset + 16));
        entity.setFunction_type(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
