package com.xsimple.im.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xsimple.im.db.datatable.IMFileInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_msg_file_new".
*/
public class IMFileInfoDao extends AbstractDao<IMFileInfo, Long> {

    public static final String TABLENAME = "im_msg_file_new";

    /**
     * Properties of entity IMFileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FId = new Property(0, Long.class, "fId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property MPath = new Property(3, String.class, "mPath", false, "M_PATH");
        public final static Property LPath = new Property(4, String.class, "lPath", false, "L_PATH");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Size = new Property(6, Long.class, "size", false, "SIZE");
        public final static Property Pos = new Property(7, Long.class, "pos", false, "POS");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Sha = new Property(9, String.class, "sha", false, "SHA");
        public final static Property BreakPoint = new Property(10, String.class, "breakPoint", false, "BREAK_POINT");
        public final static Property Time = new Property(11, String.class, "time", false, "TIME");
        public final static Property Thumbnail = new Property(12, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property IsPlay = new Property(13, boolean.class, "isPlay", false, "IS_PLAY");
        public final static Property ClientSid = new Property(14, String.class, "clientSid", false, "CLIENT_SID");
        public final static Property SendId = new Property(15, String.class, "sendId", false, "SEND_ID");
        public final static Property SenderName = new Property(16, String.class, "senderName", false, "SENDER_NAME");
        public final static Property Se_ReTime = new Property(17, long.class, "se_ReTime", false, "SE__RE_TIME");
        public final static Property Url = new Property(18, String.class, "url", false, "URL");
        public final static Property ReceiverName = new Property(19, String.class, "receiverName", false, "RECEIVER_NAME");
        public final static Property Width = new Property(20, int.class, "width", false, "IMG_WIDTH");
        public final static Property Height = new Property(21, int.class, "height", false, "IMG_HEIGHT");
        public final static Property FailedCount = new Property(22, int.class, "failedCount", false, "FAILED_COUNT");
    }

    private DaoSession daoSession;


    public IMFileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMFileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_msg_file_new\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: fId
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"M_PATH\" TEXT," + // 3: mPath
                "\"L_PATH\" TEXT," + // 4: lPath
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"SIZE\" INTEGER," + // 6: size
                "\"POS\" INTEGER," + // 7: pos
                "\"TYPE\" TEXT," + // 8: type
                "\"SHA\" TEXT," + // 9: sha
                "\"BREAK_POINT\" TEXT," + // 10: breakPoint
                "\"TIME\" TEXT," + // 11: time
                "\"THUMBNAIL\" TEXT," + // 12: thumbnail
                "\"IS_PLAY\" INTEGER NOT NULL ," + // 13: isPlay
                "\"CLIENT_SID\" TEXT," + // 14: clientSid
                "\"SEND_ID\" TEXT," + // 15: sendId
                "\"SENDER_NAME\" TEXT," + // 16: senderName
                "\"SE__RE_TIME\" INTEGER NOT NULL ," + // 17: se_ReTime
                "\"URL\" TEXT," + // 18: url
                "\"RECEIVER_NAME\" TEXT," + // 19: receiverName
                "\"IMG_WIDTH\" INTEGER NOT NULL ," + // 20: width
                "\"IMG_HEIGHT\" INTEGER NOT NULL ," + // 21: height
                "\"FAILED_COUNT\" INTEGER NOT NULL );"); // 22: failedCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_msg_file_new\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMFileInfo entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String mPath = entity.getMPath();
        if (mPath != null) {
            stmt.bindString(4, mPath);
        }
 
        String lPath = entity.getLPath();
        if (lPath != null) {
            stmt.bindString(5, lPath);
        }
        stmt.bindLong(6, entity.getStatus());
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(7, size);
        }
 
        Long pos = entity.getPos();
        if (pos != null) {
            stmt.bindLong(8, pos);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(10, sha);
        }
 
        String breakPoint = entity.getBreakPoint();
        if (breakPoint != null) {
            stmt.bindString(11, breakPoint);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(13, thumbnail);
        }
        stmt.bindLong(14, entity.getIsPlay() ? 1L: 0L);
 
        String clientSid = entity.getClientSid();
        if (clientSid != null) {
            stmt.bindString(15, clientSid);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(16, sendId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(17, senderName);
        }
        stmt.bindLong(18, entity.getSe_ReTime());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(19, url);
        }
 
        String receiverName = entity.getReceiverName();
        if (receiverName != null) {
            stmt.bindString(20, receiverName);
        }
        stmt.bindLong(21, entity.getWidth());
        stmt.bindLong(22, entity.getHeight());
        stmt.bindLong(23, entity.getFailedCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMFileInfo entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String mPath = entity.getMPath();
        if (mPath != null) {
            stmt.bindString(4, mPath);
        }
 
        String lPath = entity.getLPath();
        if (lPath != null) {
            stmt.bindString(5, lPath);
        }
        stmt.bindLong(6, entity.getStatus());
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(7, size);
        }
 
        Long pos = entity.getPos();
        if (pos != null) {
            stmt.bindLong(8, pos);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(10, sha);
        }
 
        String breakPoint = entity.getBreakPoint();
        if (breakPoint != null) {
            stmt.bindString(11, breakPoint);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(13, thumbnail);
        }
        stmt.bindLong(14, entity.getIsPlay() ? 1L: 0L);
 
        String clientSid = entity.getClientSid();
        if (clientSid != null) {
            stmt.bindString(15, clientSid);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(16, sendId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(17, senderName);
        }
        stmt.bindLong(18, entity.getSe_ReTime());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(19, url);
        }
 
        String receiverName = entity.getReceiverName();
        if (receiverName != null) {
            stmt.bindString(20, receiverName);
        }
        stmt.bindLong(21, entity.getWidth());
        stmt.bindLong(22, entity.getHeight());
        stmt.bindLong(23, entity.getFailedCount());
    }

    @Override
    protected final void attachEntity(IMFileInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMFileInfo readEntity(Cursor cursor, int offset) {
        IMFileInfo entity = new IMFileInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lPath
            cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // pos
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sha
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // breakPoint
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // thumbnail
            cursor.getShort(offset + 13) != 0, // isPlay
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // clientSid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sendId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // senderName
            cursor.getLong(offset + 17), // se_ReTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // url
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // receiverName
            cursor.getInt(offset + 20), // width
            cursor.getInt(offset + 21), // height
            cursor.getInt(offset + 22) // failedCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMFileInfo entity, int offset) {
        entity.setFId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPos(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSha(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBreakPoint(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setThumbnail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsPlay(cursor.getShort(offset + 13) != 0);
        entity.setClientSid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSendId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSenderName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSe_ReTime(cursor.getLong(offset + 17));
        entity.setUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReceiverName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setWidth(cursor.getInt(offset + 20));
        entity.setHeight(cursor.getInt(offset + 21));
        entity.setFailedCount(cursor.getInt(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMFileInfo entity, long rowId) {
        entity.setFId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMFileInfo entity) {
        if(entity != null) {
            return entity.getFId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMFileInfo entity) {
        return entity.getFId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
