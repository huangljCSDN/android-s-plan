package com.xsimple.im.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xsimple.im.db.datatable.IMBoxMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_box_message".
*/
public class IMBoxMessageDao extends AbstractDao<IMBoxMessage, Long> {

    public static final String TABLENAME = "im_box_message";

    /**
     * Properties of entity IMBoxMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property CId = new Property(1, Long.class, "cId", false, "chat_id");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property SendTimer = new Property(3, Long.class, "sendTimer", false, "SEND_TIMER");
        public final static Property IsClear = new Property(4, boolean.class, "isClear", false, "IS_CLEAR");
        public final static Property IsRead = new Property(5, boolean.class, "isRead", false, "IS_READ");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
    }

    private Query<IMBoxMessage> iMChat_IMBoxMessageQuery;

    public IMBoxMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IMBoxMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_box_message\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"chat_id\" INTEGER," + // 1: cId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"SEND_TIMER\" INTEGER," + // 3: sendTimer
                "\"IS_CLEAR\" INTEGER NOT NULL ," + // 4: isClear
                "\"IS_READ\" INTEGER NOT NULL ," + // 5: isRead
                "\"TYPE\" TEXT," + // 6: type
                "\"TITLE\" TEXT," + // 7: title
                "\"CONTENT\" TEXT);"); // 8: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_box_message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMBoxMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(2, cId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        Long sendTimer = entity.getSendTimer();
        if (sendTimer != null) {
            stmt.bindLong(4, sendTimer);
        }
        stmt.bindLong(5, entity.getIsClear() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMBoxMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(2, cId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        Long sendTimer = entity.getSendTimer();
        if (sendTimer != null) {
            stmt.bindLong(4, sendTimer);
        }
        stmt.bindLong(5, entity.getIsClear() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMBoxMessage readEntity(Cursor cursor, int offset) {
        IMBoxMessage entity = new IMBoxMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // sendTimer
            cursor.getShort(offset + 4) != 0, // isClear
            cursor.getShort(offset + 5) != 0, // isRead
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMBoxMessage entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendTimer(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIsClear(cursor.getShort(offset + 4) != 0);
        entity.setIsRead(cursor.getShort(offset + 5) != 0);
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMBoxMessage entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMBoxMessage entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMBoxMessage entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "IMBoxMessage" to-many relationship of IMChat. */
    public List<IMBoxMessage> _queryIMChat_IMBoxMessage(Long cId) {
        synchronized (this) {
            if (iMChat_IMBoxMessageQuery == null) {
                QueryBuilder<IMBoxMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CId.eq(null));
                iMChat_IMBoxMessageQuery = queryBuilder.build();
            }
        }
        Query<IMBoxMessage> query = iMChat_IMBoxMessageQuery.forCurrentThread();
        query.setParameter(0, cId);
        return query.list();
    }

}
