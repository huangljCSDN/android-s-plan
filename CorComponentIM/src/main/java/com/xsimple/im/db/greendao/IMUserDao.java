package com.xsimple.im.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xsimple.im.db.datatable.IMUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_user_new".
*/
public class IMUserDao extends AbstractDao<IMUser, String> {

    public static final String TABLENAME = "im_user_new";

    /**
     * Properties of entity IMUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Img = new Property(3, String.class, "img", false, "IMG");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Tel = new Property(5, String.class, "tel", false, "TEL");
        public final static Property Mail = new Property(6, String.class, "mail", false, "MAIL");
        public final static Property CanChat = new Property(7, String.class, "canChat", false, "CAN_CHAT");
        public final static Property LoginName = new Property(8, String.class, "loginName", false, "LOGIN_NAME");
    }

    private DaoSession daoSession;


    public IMUserDao(DaoConfig config) {
        super(config);
    }
    
    public IMUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_user_new\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"NAME\" TEXT," + // 2: name
                "\"IMG\" TEXT," + // 3: img
                "\"PHONE\" TEXT," + // 4: phone
                "\"TEL\" TEXT," + // 5: tel
                "\"MAIL\" TEXT," + // 6: mail
                "\"CAN_CHAT\" TEXT," + // 7: canChat
                "\"LOGIN_NAME\" TEXT);"); // 8: loginName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_user_new\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(7, mail);
        }
 
        String canChat = entity.getCanChat();
        if (canChat != null) {
            stmt.bindString(8, canChat);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(9, loginName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(7, mail);
        }
 
        String canChat = entity.getCanChat();
        if (canChat != null) {
            stmt.bindString(8, canChat);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(9, loginName);
        }
    }

    @Override
    protected final void attachEntity(IMUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public IMUser readEntity(Cursor cursor, int offset) {
        IMUser entity = new IMUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // canChat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // loginName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCanChat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoginName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(IMUser entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(IMUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
