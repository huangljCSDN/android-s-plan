package com.xsimple.im.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xsimple.im.db.datatable.IMReplyInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_msg_reply_info_new".
*/
public class IMReplyInfoDao extends AbstractDao<IMReplyInfo, Long> {

    public static final String TABLENAME = "im_msg_reply_info_new";

    /**
     * Properties of entity IMReplyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RId = new Property(0, Long.class, "rId", true, "_id");
        public final static Property VirtualMsgId = new Property(1, String.class, "virtualMsgId", false, "VIRTUAL_MSG_ID");
        public final static Property MsgSenderId = new Property(2, String.class, "msgSenderId", false, "MSG_SENDER_ID");
        public final static Property MsgSender = new Property(3, String.class, "msgSender", false, "MSG_SENDER");
        public final static Property MsgContent = new Property(4, String.class, "msgContent", false, "MSG_CONTENT");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
    }


    public IMReplyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMReplyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_msg_reply_info_new\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: rId
                "\"VIRTUAL_MSG_ID\" TEXT," + // 1: virtualMsgId
                "\"MSG_SENDER_ID\" TEXT," + // 2: msgSenderId
                "\"MSG_SENDER\" TEXT," + // 3: msgSender
                "\"MSG_CONTENT\" TEXT," + // 4: msgContent
                "\"CONTENT\" TEXT);"); // 5: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_msg_reply_info_new\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMReplyInfo entity) {
        stmt.clearBindings();
 
        Long rId = entity.getRId();
        if (rId != null) {
            stmt.bindLong(1, rId);
        }
 
        String virtualMsgId = entity.getVirtualMsgId();
        if (virtualMsgId != null) {
            stmt.bindString(2, virtualMsgId);
        }
 
        String msgSenderId = entity.getMsgSenderId();
        if (msgSenderId != null) {
            stmt.bindString(3, msgSenderId);
        }
 
        String msgSender = entity.getMsgSender();
        if (msgSender != null) {
            stmt.bindString(4, msgSender);
        }
 
        String msgContent = entity.getMsgContent();
        if (msgContent != null) {
            stmt.bindString(5, msgContent);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMReplyInfo entity) {
        stmt.clearBindings();
 
        Long rId = entity.getRId();
        if (rId != null) {
            stmt.bindLong(1, rId);
        }
 
        String virtualMsgId = entity.getVirtualMsgId();
        if (virtualMsgId != null) {
            stmt.bindString(2, virtualMsgId);
        }
 
        String msgSenderId = entity.getMsgSenderId();
        if (msgSenderId != null) {
            stmt.bindString(3, msgSenderId);
        }
 
        String msgSender = entity.getMsgSender();
        if (msgSender != null) {
            stmt.bindString(4, msgSender);
        }
 
        String msgContent = entity.getMsgContent();
        if (msgContent != null) {
            stmt.bindString(5, msgContent);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMReplyInfo readEntity(Cursor cursor, int offset) {
        IMReplyInfo entity = new IMReplyInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // virtualMsgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgSenderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgSender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msgContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMReplyInfo entity, int offset) {
        entity.setRId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVirtualMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgSenderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgSender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMReplyInfo entity, long rowId) {
        entity.setRId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMReplyInfo entity) {
        if(entity != null) {
            return entity.getRId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMReplyInfo entity) {
        return entity.getRId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
