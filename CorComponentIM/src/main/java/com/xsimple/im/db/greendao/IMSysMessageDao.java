package com.xsimple.im.db.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xsimple.im.db.datatable.IMGroup;

import com.xsimple.im.db.datatable.IMSysMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_system_message".
*/
public class IMSysMessageDao extends AbstractDao<IMSysMessage, Long> {

    public static final String TABLENAME = "im_system_message";

    /**
     * Properties of entity IMSysMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property CId = new Property(1, Long.class, "cId", false, "chat_id");
        public final static Property CurrUserId = new Property(2, String.class, "currUserId", false, "CURR_USER_ID");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property GroupId = new Property(5, String.class, "groupId", false, "GROUP_ID");
        public final static Property ReceivedTimer = new Property(6, Long.class, "receivedTimer", false, "RECEIVED_TIMER");
        public final static Property IsReply = new Property(7, boolean.class, "isReply", false, "IS_REPLY");
        public final static Property IsAgree = new Property(8, boolean.class, "isAgree", false, "IS_AGREE");
        public final static Property IsClear = new Property(9, boolean.class, "isClear", false, "IS_CLEAR");
        public final static Property IsRead = new Property(10, boolean.class, "isRead", false, "IS_READ");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(12, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(13, String.class, "content", false, "CONTENT");
    }

    private DaoSession daoSession;

    private Query<IMSysMessage> iMChat_IMSysMessageQuery;

    public IMSysMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IMSysMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_system_message\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"chat_id\" INTEGER," + // 1: cId
                "\"CURR_USER_ID\" TEXT," + // 2: currUserId
                "\"USER_ID\" TEXT," + // 3: userId
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"GROUP_ID\" TEXT," + // 5: groupId
                "\"RECEIVED_TIMER\" INTEGER," + // 6: receivedTimer
                "\"IS_REPLY\" INTEGER NOT NULL ," + // 7: isReply
                "\"IS_AGREE\" INTEGER NOT NULL ," + // 8: isAgree
                "\"IS_CLEAR\" INTEGER NOT NULL ," + // 9: isClear
                "\"IS_READ\" INTEGER NOT NULL ," + // 10: isRead
                "\"TYPE\" TEXT," + // 11: type
                "\"TITLE\" TEXT," + // 12: title
                "\"CONTENT\" TEXT);"); // 13: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_system_message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMSysMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(2, cId);
        }
 
        String currUserId = entity.getCurrUserId();
        if (currUserId != null) {
            stmt.bindString(3, currUserId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(6, groupId);
        }
 
        Long receivedTimer = entity.getReceivedTimer();
        if (receivedTimer != null) {
            stmt.bindLong(7, receivedTimer);
        }
        stmt.bindLong(8, entity.getIsReply() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsAgree() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsClear() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsRead() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(13, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(14, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMSysMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(2, cId);
        }
 
        String currUserId = entity.getCurrUserId();
        if (currUserId != null) {
            stmt.bindString(3, currUserId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(6, groupId);
        }
 
        Long receivedTimer = entity.getReceivedTimer();
        if (receivedTimer != null) {
            stmt.bindLong(7, receivedTimer);
        }
        stmt.bindLong(8, entity.getIsReply() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsAgree() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsClear() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsRead() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(13, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(14, content);
        }
    }

    @Override
    protected final void attachEntity(IMSysMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMSysMessage readEntity(Cursor cursor, int offset) {
        IMSysMessage entity = new IMSysMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // currUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // receivedTimer
            cursor.getShort(offset + 7) != 0, // isReply
            cursor.getShort(offset + 8) != 0, // isAgree
            cursor.getShort(offset + 9) != 0, // isClear
            cursor.getShort(offset + 10) != 0, // isRead
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // title
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMSysMessage entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCurrUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceivedTimer(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIsReply(cursor.getShort(offset + 7) != 0);
        entity.setIsAgree(cursor.getShort(offset + 8) != 0);
        entity.setIsClear(cursor.getShort(offset + 9) != 0);
        entity.setIsRead(cursor.getShort(offset + 10) != 0);
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTitle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMSysMessage entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMSysMessage entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMSysMessage entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "IMSysMessage" to-many relationship of IMChat. */
    public List<IMSysMessage> _queryIMChat_IMSysMessage(Long cId) {
        synchronized (this) {
            if (iMChat_IMSysMessageQuery == null) {
                QueryBuilder<IMSysMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CId.eq(null));
                iMChat_IMSysMessageQuery = queryBuilder.build();
            }
        }
        Query<IMSysMessage> query = iMChat_IMSysMessageQuery.forCurrentThread();
        query.setParameter(0, cId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIMGroupDao().getAllColumns());
            builder.append(" FROM im_system_message T");
            builder.append(" LEFT JOIN im_group_new T0 ON T.\"GROUP_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected IMSysMessage loadCurrentDeep(Cursor cursor, boolean lock) {
        IMSysMessage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        IMGroup group = loadCurrentOther(daoSession.getIMGroupDao(), cursor, offset);
        entity.setGroup(group);

        return entity;    
    }

    public IMSysMessage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<IMSysMessage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<IMSysMessage> list = new ArrayList<IMSysMessage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<IMSysMessage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<IMSysMessage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
