package com.xsimple.im.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xsimple.im.db.datatable.IMCallInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_msg_call_new".
*/
public class IMCallInfoDao extends AbstractDao<IMCallInfo, Long> {

    public static final String TABLENAME = "im_msg_call_new";

    /**
     * Properties of entity IMCallInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CallTime = new Property(1, long.class, "callTime", false, "CALL_TIME");
        public final static Property Homeid = new Property(2, String.class, "homeid", false, "HOMEID");
        public final static Property OptionType = new Property(3, String.class, "optionType", false, "OPTION_TYPE");
        public final static Property OptionId = new Property(4, String.class, "optionId", false, "OPTION_ID");
        public final static Property CallType = new Property(5, int.class, "callType", false, "CALL_TYPE");
        public final static Property Gid = new Property(6, String.class, "gid", false, "GID");
        public final static Property CallMsg = new Property(7, String.class, "callMsg", false, "CALL_MSG");
    }


    public IMCallInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMCallInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_msg_call_new\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CALL_TIME\" INTEGER NOT NULL ," + // 1: callTime
                "\"HOMEID\" TEXT," + // 2: homeid
                "\"OPTION_TYPE\" TEXT," + // 3: optionType
                "\"OPTION_ID\" TEXT," + // 4: optionId
                "\"CALL_TYPE\" INTEGER NOT NULL ," + // 5: callType
                "\"GID\" TEXT," + // 6: gid
                "\"CALL_MSG\" TEXT);"); // 7: callMsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_msg_call_new\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMCallInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCallTime());
 
        String homeid = entity.getHomeid();
        if (homeid != null) {
            stmt.bindString(3, homeid);
        }
 
        String optionType = entity.getOptionType();
        if (optionType != null) {
            stmt.bindString(4, optionType);
        }
 
        String optionId = entity.getOptionId();
        if (optionId != null) {
            stmt.bindString(5, optionId);
        }
        stmt.bindLong(6, entity.getCallType());
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(7, gid);
        }
 
        String callMsg = entity.getCallMsg();
        if (callMsg != null) {
            stmt.bindString(8, callMsg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMCallInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCallTime());
 
        String homeid = entity.getHomeid();
        if (homeid != null) {
            stmt.bindString(3, homeid);
        }
 
        String optionType = entity.getOptionType();
        if (optionType != null) {
            stmt.bindString(4, optionType);
        }
 
        String optionId = entity.getOptionId();
        if (optionId != null) {
            stmt.bindString(5, optionId);
        }
        stmt.bindLong(6, entity.getCallType());
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(7, gid);
        }
 
        String callMsg = entity.getCallMsg();
        if (callMsg != null) {
            stmt.bindString(8, callMsg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMCallInfo readEntity(Cursor cursor, int offset) {
        IMCallInfo entity = new IMCallInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // callTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // homeid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionId
            cursor.getInt(offset + 5), // callType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // callMsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMCallInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCallTime(cursor.getLong(offset + 1));
        entity.setHomeid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCallType(cursor.getInt(offset + 5));
        entity.setGid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCallMsg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMCallInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMCallInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMCallInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
