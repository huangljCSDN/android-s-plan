package com.xsimple.im.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xsimple.im.db.datatable.IMFileInfoPice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "im_file_thread_record".
*/
public class IMFileInfoPiceDao extends AbstractDao<IMFileInfoPice, Long> {

    public static final String TABLENAME = "im_file_thread_record";

    /**
     * Properties of entity IMFileInfoPice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Fid = new Property(1, Long.class, "fid", false, "FID");
        public final static Property Sha = new Property(2, String.class, "sha", false, "SHA");
        public final static Property Start = new Property(3, long.class, "start", false, "START");
        public final static Property End = new Property(4, long.class, "end", false, "END");
        public final static Property Size = new Property(5, long.class, "size", false, "SIZE");
        public final static Property ShaNum = new Property(6, int.class, "shaNum", false, "SHA_NUM");
        public final static Property ShaCount = new Property(7, int.class, "shaCount", false, "SHA_COUNT");
        public final static Property ClientSid = new Property(8, String.class, "clientSid", false, "CLIENT_SID");
        public final static Property TempFile = new Property(9, String.class, "tempFile", false, "TEMP_FILE");
        public final static Property Finished = new Property(10, long.class, "finished", false, "FINISHED");
    }

    private Query<IMFileInfoPice> iMFileInfo_IMFileThreadPiceQuery;

    public IMFileInfoPiceDao(DaoConfig config) {
        super(config);
    }
    
    public IMFileInfoPiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"im_file_thread_record\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"FID\" INTEGER," + // 1: fid
                "\"SHA\" TEXT," + // 2: sha
                "\"START\" INTEGER NOT NULL ," + // 3: start
                "\"END\" INTEGER NOT NULL ," + // 4: end
                "\"SIZE\" INTEGER NOT NULL ," + // 5: size
                "\"SHA_NUM\" INTEGER NOT NULL ," + // 6: shaNum
                "\"SHA_COUNT\" INTEGER NOT NULL ," + // 7: shaCount
                "\"CLIENT_SID\" TEXT," + // 8: clientSid
                "\"TEMP_FILE\" TEXT," + // 9: tempFile
                "\"FINISHED\" INTEGER NOT NULL );"); // 10: finished
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"im_file_thread_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMFileInfoPice entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(2, fid);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(3, sha);
        }
        stmt.bindLong(4, entity.getStart());
        stmt.bindLong(5, entity.getEnd());
        stmt.bindLong(6, entity.getSize());
        stmt.bindLong(7, entity.getShaNum());
        stmt.bindLong(8, entity.getShaCount());
 
        String clientSid = entity.getClientSid();
        if (clientSid != null) {
            stmt.bindString(9, clientSid);
        }
 
        String tempFile = entity.getTempFile();
        if (tempFile != null) {
            stmt.bindString(10, tempFile);
        }
        stmt.bindLong(11, entity.getFinished());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMFileInfoPice entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(2, fid);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(3, sha);
        }
        stmt.bindLong(4, entity.getStart());
        stmt.bindLong(5, entity.getEnd());
        stmt.bindLong(6, entity.getSize());
        stmt.bindLong(7, entity.getShaNum());
        stmt.bindLong(8, entity.getShaCount());
 
        String clientSid = entity.getClientSid();
        if (clientSid != null) {
            stmt.bindString(9, clientSid);
        }
 
        String tempFile = entity.getTempFile();
        if (tempFile != null) {
            stmt.bindString(10, tempFile);
        }
        stmt.bindLong(11, entity.getFinished());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMFileInfoPice readEntity(Cursor cursor, int offset) {
        IMFileInfoPice entity = new IMFileInfoPice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sha
            cursor.getLong(offset + 3), // start
            cursor.getLong(offset + 4), // end
            cursor.getLong(offset + 5), // size
            cursor.getInt(offset + 6), // shaNum
            cursor.getInt(offset + 7), // shaCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // clientSid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tempFile
            cursor.getLong(offset + 10) // finished
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMFileInfoPice entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSha(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart(cursor.getLong(offset + 3));
        entity.setEnd(cursor.getLong(offset + 4));
        entity.setSize(cursor.getLong(offset + 5));
        entity.setShaNum(cursor.getInt(offset + 6));
        entity.setShaCount(cursor.getInt(offset + 7));
        entity.setClientSid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTempFile(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFinished(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMFileInfoPice entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMFileInfoPice entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMFileInfoPice entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "IMFileThreadPice" to-many relationship of IMFileInfo. */
    public List<IMFileInfoPice> _queryIMFileInfo_IMFileThreadPice(Long fid) {
        synchronized (this) {
            if (iMFileInfo_IMFileThreadPiceQuery == null) {
                QueryBuilder<IMFileInfoPice> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Fid.eq(null));
                iMFileInfo_IMFileThreadPiceQuery = queryBuilder.build();
            }
        }
        Query<IMFileInfoPice> query = iMFileInfo_IMFileThreadPiceQuery.forCurrentThread();
        query.setParameter(0, fid);
        return query.list();
    }

}
